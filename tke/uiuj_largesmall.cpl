! Originally downloaded from https://raw.githubusercontent.com/davecats/dns-channel/master/tke/uiuj_spectra.cpl

! This program computes the spectral budget equation for the 
! Reynolds stresses (1,1), (2,2), (3,3), (1,2) 

! Only spanwise wavenumbers allowed

! The turbulent transport is divided into its constitutive components



outinterv=10
gamma=0



USE ../dnsdata
USE ../dnsdirect
!USE rtchecks
USE convenience
USE largesmall_def



! Parameters
! -----------------------------
INTEGER nfmin,nfmax,dn
nfmin=atoi(COMMANDLINE(4))
nfmax=atoi(COMMANDLINE(5))
dn=atoi(COMMANDLINE(6))
!------------------------------
nftot=[(nfmax-nfmin) DIV dn]+1


! Definitions
! ------------------------------------
!#define cprod(f,g,h) h.REAL=f.REAL*g.REAL; h.IMAG=f.IMAG*g.IMAG
!#define cprod3(f,g,k,h) h.REAL=f.REAL*g.REAL*k.REAL; h.IMAG=f.IMAG*g.IMAG*k.IMAG
MEANTERMS = STRUCTURE(REAL U,W,Uy,Wy,Uyy,Wyy,P)
BALANCE = STRUCTURED ARRAY(var,prod,psdiss,ttrsp,tcross,vdiff,pstrain,ptrsp,PHIttrsp,PHIvdiff,PHIptrsp) OF ARRAY(1..6) OF REAL
! the six reals in the structured array "balance" are the six components of the Reynolds stress tensor

SHARED ARRAY(0..nx,-nz..nz,nyl-2..nyh+2) OF COMPLEX pressure=0
SHARED ARRAY(0..nx,-nz..nz,nyl-2..nyh+2) OF DERIVS Vder=0
POINTER TO STORED ARRAY(0..nx,-nz..nz,nyl-2..nyh+2) OF COMPLEX pressuredata

SHARED ARRAY(0..nxd-1,0..nzd-1) OF DERIVS Vderl=0
SHARED ARRAY(0..nxd-1,0..nzd-1) OF DERIVS Vders=0
SHARED ARRAY(0..nxd-1,0..nzd-1) OF VELOCITY Vl=0
SHARED ARRAY(0..nxd-1,0..nzd-1) OF VELOCITY Vs=0

SHARED ARRAY(0..nxd-1,0..nzd-1) OF DERPRODSEXT VVderd=0
SHARED ARRAY(0..nxd-1,0..nzd-1,1..4) OF COMPLEX PHIttrspd=0
SHARED ARRAY(0..nxd-1,0..nzd-1,1..4) OF COMPLEX temp_tcross=0

!SHARED ARRAY(nyl-2..nyh+2,0..nz,-nz..nz) OF STRUCTURED ARRAY(uu,vv,ww,uv) OF REAL convs=0
SHARED ARRAY(nyl-2..nyh+2) OF MEANTERMS mean=0
SHARED ARRAY(nyl-2..nyh+2,-nz..nz) OF BALANCE suiuj=0
SHARED ARRAY(nyl-2..nyh+2) OF BALANCE suiujprofiles=0
SHARED ARRAY(nyl-2..nyh+2,-nz..nz) OF BALANCE luiuj=0
SHARED ARRAY(nyl-2..nyh+2) OF BALANCE luiujprofiles=0
ARRAY(-nz..nz) OF INTEGER izdV=0; DO izdV(iz)=IF iz>=0 THEN iz ELSE nzd+iz FOR iz=-nz TO nz
izd==izdV(iz)



! Apply settings
! ------------------------------------
largesmall_setup()



! Compute the average field
! ------------------------------------
LOOP files FOR n=nfmin TO nfmax BY dn
  IF NOT first THEN READ FROM prev
  STRING field_name = WRITE('Field'n'.fld')
  STRING pressure_name = WRITE('pField'n'.fld')
  diskfield=OPEN(field_name); pressuredata=OPEN(pressure_name)
  WITH diskfield,mean(*):
    U=~+uavimage(nyl-2..nyh+2); W=~+wavimage(nyl-2..nyh+2)
    P=~+pressuredata(0,0,nyl-2..nyh+2).REAL
  CLOSE(diskfield); CLOSE(pressuredata)
  IF NOT last THEN WRITE TO next
REPEAT files
WITH mean: U=~/nftot; W=~/nftot; P=~/nftot
WITH mean:  deriv(U, Uy);  LeftLUDivStep2(Uy,  D0mat); deriv(W, Wy);   LeftLUDivStep2(Wy, D0mat)
WITH mean: deriv2(U, Uyy); LeftLUDivStep2(Uyy, D0mat) deriv2(W, Wyy); LeftLUDivStep2(Wyy, D0mat)



! Compute the TKE budget
! ------------------------------------
LOOP fields FOR n=nfmin TO nfmax BY dn
  ! Read field
  STRING field_name = WRITE('Field'n'.fld')
  read_field_parallel(field_name)
  ! Pressure field
  STRING pressure_name = WRITE('pField'n'.fld'); pressuredata=OPEN(pressure_name)
  pressure(*,*,nyl-2..nyh+2)=pressuredata(*,*,nyl-2..nyh+2); CLOSE(pressuredata)
  ! Compute fluctuating field
  WITH mean(*),V(0,0,*),Vder(0,0,*): u.REAL=~-U; w.REAL=~-W; pressure(0,0,*)=~-P;
  ! Compute derivatives
  velocity_gradient(Vder)
  ! Parseval theorem method for var, pstrain and PHIptrsp
  LOOP FOR iy=nyl-2 TO nyh+2
    LOOP FOR ALL ix,iz WITH V(ix,iz,iy),Vder(ix,iz,iy), mean(iy):
      p == pressure(ix,iz,iy)
      c=IF ix=0 THEN 1 ELSE 2
      IF is_large(ix,iz) THEN
        luiuj.prod(1)= ~ - c*(u|v + v|u).REAL*Uy
        luiuj.prod(3)= ~ - c*(v|w + w|v).REAL*Wy
        luiuj.prod(4)= ~ - c*(v|v).REAL*Uy
        luiuj.var(1) = ~ + c*(u|u).REAL;                               luiuj.var(2) = ~ + c*(v|v).REAL
        luiuj.var(3) = ~ + c*(w|w).REAL;                               luiuj.var(4) = ~ + c*(u|v + v|u).REAL
        luiuj.var(5) = ~ + c*(v|w + w|v).REAL;                         luiuj.var(6) = ~ + c*(u|w + w|u).REAL
        luiuj.PHIptrsp(2) = ~ - c*(v|p + p|v).REAL;                    luiuj.PHIptrsp(4) = ~ - c*(p|u).REAL
        luiuj.pstrain(1) = ~ + c*[ux|p + p|ux].REAL;                   luiuj.pstrain(2) = ~ + c*[vy|p + p|vy].REAL
        luiuj.pstrain(3) = ~ + c*[wz|p + p|wz].REAL;                   luiuj.pstrain(4) = ~ + c*[vx|p + p|uy].REAL
        luiuj.psdiss(1)= ~ - 2*ni*c*[ux|ux + uy|uy + uz|uz].REAL;      luiuj.psdiss(2)=~-2*ni*c*[vx|vx + vy|vy + vz|vz].REAL
        luiuj.psdiss(3)= ~ - 2*ni*c*[wx|wx + wy|wy + wz|wz].REAL;      luiuj.psdiss(4)=~-2*ni*c*[ux|vx + uy|vy + uz|vz].REAL
      ELSE
        suiuj.prod(1)= ~ - c*(u|v + v|u).REAL*Uy
        suiuj.prod(3)= ~ - c*(v|w + w|v).REAL*Wy
        suiuj.prod(4)= ~ - c*(v|v).REAL*Uy
        suiuj.var(1) = ~ + c*(u|u).REAL;                               suiuj.var(2) = ~ + c*(v|v).REAL
        suiuj.var(3) = ~ + c*(w|w).REAL;                               suiuj.var(4) = ~ + c*(u|v + v|u).REAL
        suiuj.var(5) = ~ + c*(v|w + w|v).REAL;                         suiuj.var(6) = ~ + c*(u|w + w|u).REAL
        suiuj.PHIptrsp(2) = ~ - c*(v|p + p|v).REAL;                    suiuj.PHIptrsp(4) = ~ - c*(p|u).REAL
        suiuj.pstrain(1) = ~ + c*[ux|p + p|ux].REAL;                   suiuj.pstrain(2) = ~ + c*[vy|p + p|vy].REAL
        suiuj.pstrain(3) = ~ + c*[wz|p + p|wz].REAL;                   suiuj.pstrain(4) = ~ + c*[vx|p + p|uy].REAL
        suiuj.psdiss(1)= ~ - 2*ni*c*[ux|ux + uy|uy + uz|uz].REAL;      suiuj.psdiss(2)=~-2*ni*c*[vx|vx + vy|vy + vz|vz].REAL
        suiuj.psdiss(3)= ~ - 2*ni*c*[wx|wx + wy|wy + wz|wz].REAL;      suiuj.psdiss(4)=~-2*ni*c*[ux|vx + uy|vy + uz|vz].REAL
      END IF
    REPEAT
  REPEAT
  ! ttrsp term is the only one requiring pseudospectral convolution
  LOOP FOR iy=nyl-2 TO nyh+2
    Vderl=0; Vders=0
    Vl=0; Vs=0
    ! prepare fast and slow velocity, also inverting order of index so that it suits FFT
    LOOP FOR ix=0 TO nx AND iz=0 TO nz
      IF is_large(ix,iz) THEN
        Vderl(ix,iz)=Vder(ix,iz,iy);
        Vl(ix,iz)=V(ix,iz,iy);
      ELSE
        Vders(ix,iz)=Vder(ix,iz,iy);
        Vs(ix,iz)=V(ix,iz,iy);
      END IF
    REPEAT
    LOOP FOR ix=0 TO nx AND iz=-nz TO -1
      IF is_large(ix,iz) THEN
        Vderl(ix,nzd+iz)=Vder(ix,iz,iy)
        Vl(ix,nzd+iz)=V(ix,iz,iy)
      ELSE
        Vders(ix,nzd+iz)=Vder(ix,iz,iy)
        Vs(ix,nzd+iz)=V(ix,iz,iy)
      END IF
    REPEAT
    ! Fourier antitransform
    DO
      WITH Vderl(ix,*): INLINE LOOP FOR ii IN (ux,vx,wx,uy,vy,wy,uz,vz,wz); IFT(ii); REPEAT
      WITH Vders(ix,*): INLINE LOOP FOR ii IN (ux,vx,wx,uy,vy,wy,uz,vz,wz); IFT(ii); REPEAT
      WITH Vl(ix,*):    INLINE LOOP FOR i  IN (u,v,w); IFT(i); REPEAT
      WITH Vs(ix,*):    INLINE LOOP FOR i  IN (u,v,w); IFT(i); REPEAT
    FOR ix=0 TO nx
    DO
      WITH Vders(*,iz): INLINE LOOP FOR ii IN (ux,vx,wx,uy,vy,wy,uz,vz,wz); RFT(ii); REPEAT
      WITH Vderl(*,iz): INLINE LOOP FOR ii IN (ux,vx,wx,uy,vy,wy,uz,vz,wz); RFT(ii); REPEAT
      WITH Vl(*,iz):    INLINE LOOP FOR i  IN (u,v,w); RFT(i); REPEAT
      WITH Vs(*,iz):    INLINE LOOP FOR i  IN (u,v,w); RFT(i); REPEAT
    FOR iz=0 TO HI
    ! calculate stuff for large scales
    PHIttrspd = 0; temp_tcross = 0;
    DO 
      PHIttrspd(ix,iz,1).REAL=Vl(ix,iz).u.REAL * Vl(ix,iz).u.REAL * (Vl(ix,iz).u.REAL + Vl(ix,iz).v.REAL + Vl(ix,iz).w.REAL + Vs(ix,iz).u.REAL + Vs(ix,iz).v.REAL + Vs(ix,iz).w.REAL)
      PHIttrspd(ix,iz,1).IMAG=Vl(ix,iz).u.IMAG * Vl(ix,iz).u.IMAG * (Vl(ix,iz).u.IMAG + Vl(ix,iz).v.IMAG + Vl(ix,iz).w.IMAG + Vs(ix,iz).u.IMAG + Vs(ix,iz).v.IMAG + Vs(ix,iz).w.IMAG)
      PHIttrspd(ix,iz,2).REAL=Vl(ix,iz).v.REAL * Vl(ix,iz).v.REAL * (Vl(ix,iz).u.REAL + Vl(ix,iz).v.REAL + Vl(ix,iz).w.REAL + Vs(ix,iz).u.REAL + Vs(ix,iz).v.REAL + Vs(ix,iz).w.REAL)
      PHIttrspd(ix,iz,2).IMAG=Vl(ix,iz).v.IMAG * Vl(ix,iz).v.IMAG * (Vl(ix,iz).u.IMAG + Vl(ix,iz).v.IMAG + Vl(ix,iz).w.IMAG + Vs(ix,iz).u.IMAG + Vs(ix,iz).v.IMAG + Vs(ix,iz).w.IMAG)  
      PHIttrspd(ix,iz,3).REAL=Vl(ix,iz).w.REAL * Vl(ix,iz).w.REAL * (Vl(ix,iz).u.REAL + Vl(ix,iz).v.REAL + Vl(ix,iz).w.REAL + Vs(ix,iz).u.REAL + Vs(ix,iz).v.REAL + Vs(ix,iz).w.REAL)
      PHIttrspd(ix,iz,3).IMAG=Vl(ix,iz).w.IMAG * Vl(ix,iz).w.IMAG * (Vl(ix,iz).u.IMAG + Vl(ix,iz).v.IMAG + Vl(ix,iz).w.IMAG + Vs(ix,iz).u.IMAG + Vs(ix,iz).v.IMAG + Vs(ix,iz).w.IMAG)
      PHIttrspd(ix,iz,4).REAL=Vl(ix,iz).u.REAL * Vl(ix,iz).v.REAL * (Vl(ix,iz).u.REAL + Vl(ix,iz).v.REAL + Vl(ix,iz).w.REAL + Vs(ix,iz).u.REAL + Vs(ix,iz).v.REAL + Vs(ix,iz).w.REAL)
      PHIttrspd(ix,iz,4).IMAG=Vl(ix,iz).u.IMAG * Vl(ix,iz).v.IMAG * (Vl(ix,iz).u.IMAG + Vl(ix,iz).v.IMAG + Vl(ix,iz).w.IMAG + Vs(ix,iz).u.IMAG + Vs(ix,iz).v.IMAG + Vs(ix,iz).w.IMAG)
      temp_tcross(ix,iz,1).REAL=2*(Vl(ix,iz).u.REAL * ((Vl(ix,iz).u.REAL + Vs(ix,iz).u.REAL)*Vders(ix,iz).ux.REAL + (Vl(ix,iz).v.REAL + Vs(ix,iz).v.REAL)*Vders(ix,iz).uy.REAL + (Vl(ix,iz).w.REAL + Vs(ix,iz).w.REAL)*Vders(ix,iz).uz.REAL))
      temp_tcross(ix,iz,1).IMAG=2*(Vl(ix,iz).u.IMAG * ((Vl(ix,iz).u.IMAG + Vs(ix,iz).u.IMAG)*Vders(ix,iz).ux.IMAG + (Vl(ix,iz).v.IMAG + Vs(ix,iz).v.IMAG)*Vders(ix,iz).uy.IMAG + (Vl(ix,iz).w.IMAG + Vs(ix,iz).w.IMAG)*Vders(ix,iz).uz.IMAG))
      temp_tcross(ix,iz,2).REAL=2*(Vl(ix,iz).v.REAL * ((Vl(ix,iz).u.REAL + Vs(ix,iz).u.REAL)*Vders(ix,iz).vx.REAL + (Vl(ix,iz).v.REAL + Vs(ix,iz).v.REAL)*Vders(ix,iz).vy.REAL + (Vl(ix,iz).w.REAL + Vs(ix,iz).w.REAL)*Vders(ix,iz).vz.REAL))
      temp_tcross(ix,iz,2).IMAG=2*(Vl(ix,iz).v.IMAG * ((Vl(ix,iz).u.IMAG + Vs(ix,iz).u.IMAG)*Vders(ix,iz).vx.IMAG + (Vl(ix,iz).v.IMAG + Vs(ix,iz).v.IMAG)*Vders(ix,iz).vy.IMAG + (Vl(ix,iz).w.IMAG + Vs(ix,iz).w.IMAG)*Vders(ix,iz).vz.IMAG))
      temp_tcross(ix,iz,3).REAL=2*(Vl(ix,iz).w.REAL * ((Vl(ix,iz).u.REAL + Vs(ix,iz).u.REAL)*Vders(ix,iz).wx.REAL + (Vl(ix,iz).v.REAL + Vs(ix,iz).v.REAL)*Vders(ix,iz).wy.REAL + (Vl(ix,iz).w.REAL + Vs(ix,iz).w.REAL)*Vders(ix,iz).wz.REAL))
      temp_tcross(ix,iz,3).IMAG=2*(Vl(ix,iz).w.IMAG * ((Vl(ix,iz).u.IMAG + Vs(ix,iz).u.IMAG)*Vders(ix,iz).wx.IMAG + (Vl(ix,iz).v.IMAG + Vs(ix,iz).v.IMAG)*Vders(ix,iz).wy.IMAG + (Vl(ix,iz).w.IMAG + Vs(ix,iz).w.IMAG)*Vders(ix,iz).wz.IMAG))
      temp_tcross(ix,iz,4).REAL=(Vl(ix,iz).u.REAL * ((Vl(ix,iz).u.REAL + Vs(ix,iz).u.REAL)*Vders(ix,iz).vx.REAL + (Vl(ix,iz).v.REAL + Vs(ix,iz).v.REAL)*Vders(ix,iz).vy.REAL + (Vl(ix,iz).w.REAL + Vs(ix,iz).w.REAL)*Vders(ix,iz).vz.REAL)) + (Vl(ix,iz).v.REAL * ((Vl(ix,iz).u.REAL + Vs(ix,iz).u.REAL)*Vders(ix,iz).ux.REAL + (Vl(ix,iz).v.REAL + Vs(ix,iz).v.REAL)*Vders(ix,iz).uy.REAL + (Vl(ix,iz).w.REAL + Vs(ix,iz).w.REAL)*Vders(ix,iz).uz.REAL))
      temp_tcross(ix,iz,4).IMAG=(Vl(ix,iz).u.IMAG * ((Vl(ix,iz).u.IMAG + Vs(ix,iz).u.IMAG)*Vders(ix,iz).vx.IMAG + (Vl(ix,iz).v.IMAG + Vs(ix,iz).v.IMAG)*Vders(ix,iz).vy.IMAG + (Vl(ix,iz).w.IMAG + Vs(ix,iz).w.IMAG)*Vders(ix,iz).vz.IMAG)) + (Vl(ix,iz).v.IMAG * ((Vl(ix,iz).u.IMAG + Vs(ix,iz).u.IMAG)*Vders(ix,iz).ux.IMAG + (Vl(ix,iz).v.IMAG + Vs(ix,iz).v.IMAG)*Vders(ix,iz).uy.IMAG + (Vl(ix,iz).w.IMAG + Vs(ix,iz).w.IMAG)*Vders(ix,iz).uz.IMAG))
    FOR ALL ix,iz
    ! Fourier transform
    DO HFT(PHIttrspd(*,iz,i)) FOR ALL i,iz; DO HFT(temp_tcross(*,iz,i)) FOR ALL i,iz
    DO FFT(PHIttrspd(ix,*,i)) FOR ALL i AND ix=0 TO nx;  DO FFT(temp_tcross(ix,*,i)) FOR ALL i AND ix=0 TO nx
    ! Write to luiuj (summing in ix)
    DO WITH luiuj(iy,iz)
        c=IF ix=0 THEN 1 ELSE 2
        DO PHIttrsp(i) = ~ -c * PHIttrspd(ix,izd,i).REAL FOR i=1 TO 4
        DO tcross(i) = ~ -c * temp_tcross(ix,izd,i).REAL FOR i=1 TO 4
    FOR ix=0 TO nx AND iz=-nz TO nz
!    ! Convolutions
!    ARRAY(0..2*nxd-1,0..nzd-1) OF VELOCITY VD
!    ARRAY(0..2*nxd-1,0..nzd-1) OF DERIVS VderD
!    DO WITH Vd(*,iz), Vderd(*,iz): 
!      VD(ix,iz).u=u.REALIFIED(ix); VD(ix,iz).v=v.REALIFIED(ix); VD(ix,iz).w=w.REALIFIED(ix)
!      VderD(ix,iz).ux=ux.REALIFIED(ix); VderD(ix,iz).uy=uy.REALIFIED(ix); VderD(ix,iz).uz=uz.REALIFIED(ix)
!      VderD(ix,iz).vx=vx.REALIFIED(ix); VderD(ix,iz).vy=vy.REALIFIED(ix); VderD(ix,iz).vz=vz.REALIFIED(ix)
!      VderD(ix,iz).wx=wx.REALIFIED(ix); VderD(ix,iz).wy=wy.REALIFIED(ix); VderD(ix,iz).wz=wz.REALIFIED(ix)
!    FOR ix=0 TO 2*nxd-1 AND iz=0 TO nzd-1
!    DO  
!      WITH VderD(ix,*): INLINE LOOP FOR ii IN (ux,vx,wx,uy,vy,wy,uz,vz,wz); FFT(ii); REPEAT
!      WITH VD(ix,*):    INLINE LOOP FOR i  IN (u,v,w); FFT(i); REPEAT
!    FOR ALL ix
!    ARRAY(-nz..nz) OF DERIVS Vdertmp
!    ARRAY(-nz..nz) OF VELOCITY Vtmp
!#define triad(a,b,q,d) convolution(c*CONJG(a),b,q,d); convolution(c*a,CONJG(b),CONJG(q),d);
!#ifdef convolutions
!    DO WITH Vtmp(*), Vdertmp(*), convs(iy,*,*):
!          Vtmp(0..nz)=VD(ix,0..nz); Vtmp(-nz..-1)=VD(ix,nzd+(-nz..-1))
!          Vdertmp(0..nz)=VderD(ix,0..nz); Vdertmp(-nz..-1)=VderD(ix,nzd+(-nz..-1))
!          c=0.5/nxd
!          ! uu 
!          triad(u,ux,u,uu); triad(u,vy,u,uu); triad(u,wz,u,uu);
!          triad(u,u,ux,uu); triad(u,v,uy,uu); triad(u,w,uz,uu);
!          ! vv
!          triad(v,ux,v,vv); triad(v,vy,v,vv); triad(v,wz,v,vv);
!          triad(v,vx,u,vv); triad(v,vy,v,vv); triad(v,vz,w,vv);
!          ! ww 
!          triad(w,ux,w,ww); triad(w,vy,w,ww); triad(w,wz,w,ww);
!          triad(w,wx,u,ww); triad(w,wy,v,ww); triad(w,wz,w,ww);
!          ! uv
!          convolution(c*CONJG(v),ux,u,uv); convolution(c*CONJG(v),vy,u,uv); convolution(c*CONJG(v),wz,u,uv)
!          convolution(c*CONJG(v),ux,u,uv); convolution(c*CONJG(v),uy,v,uv); convolution(c*CONJG(v),uz,w,uv)
!          convolution(c*u,CONJG(ux),CONJG(v),uv); convolution(c*u,CONJG(vy),CONJG(v),uv); convolution(c*u,CONJG(wz),CONJG(v),uv)
!          convolution(c*u,CONJG(vx),CONJG(u),uv); convolution(c*u,CONJG(vy),CONJG(v),uv); convolution(c*u,CONJG(vz),CONJG(w),uv)
!    FOR ALL ix
!#endif
    ! calculate stuff for small scales
    PHIttrspd = 0; temp_tcross = 0;
    DO
      PHIttrspd(ix,iz,1).REAL=Vs(ix,iz).u.REAL * Vs(ix,iz).u.REAL * (Vs(ix,iz).u.REAL + Vs(ix,iz).v.REAL + Vs(ix,iz).w.REAL + Vl(ix,iz).u.REAL + Vl(ix,iz).v.REAL + Vl(ix,iz).w.REAL)
      PHIttrspd(ix,iz,1).IMAG=Vs(ix,iz).u.IMAG * Vs(ix,iz).u.IMAG * (Vs(ix,iz).u.IMAG + Vs(ix,iz).v.IMAG + Vs(ix,iz).w.IMAG + Vl(ix,iz).u.IMAG + Vl(ix,iz).v.IMAG + Vl(ix,iz).w.IMAG)
      PHIttrspd(ix,iz,2).REAL=Vs(ix,iz).v.REAL * Vs(ix,iz).v.REAL * (Vs(ix,iz).u.REAL + Vs(ix,iz).v.REAL + Vs(ix,iz).w.REAL + Vl(ix,iz).u.REAL + Vl(ix,iz).v.REAL + Vl(ix,iz).w.REAL)
      PHIttrspd(ix,iz,2).IMAG=Vs(ix,iz).v.IMAG * Vs(ix,iz).v.IMAG * (Vs(ix,iz).u.IMAG + Vs(ix,iz).v.IMAG + Vs(ix,iz).w.IMAG + Vl(ix,iz).u.IMAG + Vl(ix,iz).v.IMAG + Vl(ix,iz).w.IMAG)  
      PHIttrspd(ix,iz,3).REAL=Vs(ix,iz).w.REAL * Vs(ix,iz).w.REAL * (Vs(ix,iz).u.REAL + Vs(ix,iz).v.REAL + Vs(ix,iz).w.REAL + Vl(ix,iz).u.REAL + Vl(ix,iz).v.REAL + Vl(ix,iz).w.REAL)
      PHIttrspd(ix,iz,3).IMAG=Vs(ix,iz).w.IMAG * Vs(ix,iz).w.IMAG * (Vs(ix,iz).u.IMAG + Vs(ix,iz).v.IMAG + Vs(ix,iz).w.IMAG + Vl(ix,iz).u.IMAG + Vl(ix,iz).v.IMAG + Vl(ix,iz).w.IMAG)
      PHIttrspd(ix,iz,4).REAL=Vs(ix,iz).u.REAL * Vs(ix,iz).v.REAL * (Vs(ix,iz).u.REAL + Vs(ix,iz).v.REAL + Vs(ix,iz).w.REAL + Vl(ix,iz).u.REAL + Vl(ix,iz).v.REAL + Vl(ix,iz).w.REAL)
      PHIttrspd(ix,iz,4).IMAG=Vs(ix,iz).u.IMAG * Vs(ix,iz).v.IMAG * (Vs(ix,iz).u.IMAG + Vs(ix,iz).v.IMAG + Vs(ix,iz).w.IMAG + Vl(ix,iz).u.IMAG + Vl(ix,iz).v.IMAG + Vl(ix,iz).w.IMAG)
      temp_tcross(ix,iz,1).REAL=2*(Vs(ix,iz).u.REAL * ((Vl(ix,iz).u.REAL + Vs(ix,iz).u.REAL)*Vderl(ix,iz).ux.REAL + (Vl(ix,iz).v.REAL + Vs(ix,iz).v.REAL)*Vderl(ix,iz).uy.REAL + (Vl(ix,iz).w.REAL + Vs(ix,iz).w.REAL)*Vderl(ix,iz).uz.REAL))
      temp_tcross(ix,iz,1).IMAG=2*(Vs(ix,iz).u.IMAG * ((Vl(ix,iz).u.IMAG + Vs(ix,iz).u.IMAG)*Vderl(ix,iz).ux.IMAG + (Vl(ix,iz).v.IMAG + Vs(ix,iz).v.IMAG)*Vderl(ix,iz).uy.IMAG + (Vl(ix,iz).w.IMAG + Vs(ix,iz).w.IMAG)*Vderl(ix,iz).uz.IMAG))
      temp_tcross(ix,iz,2).REAL=2*(Vs(ix,iz).v.REAL * ((Vl(ix,iz).u.REAL + Vs(ix,iz).u.REAL)*Vderl(ix,iz).vx.REAL + (Vl(ix,iz).v.REAL + Vs(ix,iz).v.REAL)*Vderl(ix,iz).vy.REAL + (Vl(ix,iz).w.REAL + Vs(ix,iz).w.REAL)*Vderl(ix,iz).vz.REAL))
      temp_tcross(ix,iz,2).IMAG=2*(Vs(ix,iz).v.IMAG * ((Vl(ix,iz).u.IMAG + Vs(ix,iz).u.IMAG)*Vderl(ix,iz).vx.IMAG + (Vl(ix,iz).v.IMAG + Vs(ix,iz).v.IMAG)*Vderl(ix,iz).vy.IMAG + (Vl(ix,iz).w.IMAG + Vs(ix,iz).w.IMAG)*Vderl(ix,iz).vz.IMAG))
      temp_tcross(ix,iz,3).REAL=2*(Vs(ix,iz).w.REAL * ((Vl(ix,iz).u.REAL + Vs(ix,iz).u.REAL)*Vderl(ix,iz).wx.REAL + (Vl(ix,iz).v.REAL + Vs(ix,iz).v.REAL)*Vderl(ix,iz).wy.REAL + (Vl(ix,iz).w.REAL + Vs(ix,iz).w.REAL)*Vderl(ix,iz).wz.REAL))
      temp_tcross(ix,iz,3).IMAG=2*(Vs(ix,iz).w.IMAG * ((Vl(ix,iz).u.IMAG + Vs(ix,iz).u.IMAG)*Vderl(ix,iz).wx.IMAG + (Vl(ix,iz).v.IMAG + Vs(ix,iz).v.IMAG)*Vderl(ix,iz).wy.IMAG + (Vl(ix,iz).w.IMAG + Vs(ix,iz).w.IMAG)*Vderl(ix,iz).wz.IMAG))
      temp_tcross(ix,iz,4).REAL=(Vs(ix,iz).u.REAL * ((Vl(ix,iz).u.REAL + Vs(ix,iz).u.REAL)*Vderl(ix,iz).vx.REAL + (Vl(ix,iz).v.REAL + Vs(ix,iz).v.REAL)*Vderl(ix,iz).vy.REAL + (Vl(ix,iz).w.REAL + Vs(ix,iz).w.REAL)*Vderl(ix,iz).vz.REAL)) + (Vs(ix,iz).v.REAL * ((Vl(ix,iz).u.REAL + Vs(ix,iz).u.REAL)*Vderl(ix,iz).ux.REAL + (Vl(ix,iz).v.REAL + Vs(ix,iz).v.REAL)*Vderl(ix,iz).uy.REAL + (Vl(ix,iz).w.REAL + Vs(ix,iz).w.REAL)*Vderl(ix,iz).uz.REAL))
      temp_tcross(ix,iz,4).IMAG=(Vs(ix,iz).u.IMAG * ((Vl(ix,iz).u.IMAG + Vs(ix,iz).u.IMAG)*Vderl(ix,iz).vx.IMAG + (Vl(ix,iz).v.IMAG + Vs(ix,iz).v.IMAG)*Vderl(ix,iz).vy.IMAG + (Vl(ix,iz).w.IMAG + Vs(ix,iz).w.IMAG)*Vderl(ix,iz).vz.IMAG)) + (Vs(ix,iz).v.IMAG * ((Vl(ix,iz).u.IMAG + Vs(ix,iz).u.IMAG)*Vderl(ix,iz).ux.IMAG + (Vl(ix,iz).v.IMAG + Vs(ix,iz).v.IMAG)*Vderl(ix,iz).uy.IMAG + (Vl(ix,iz).w.IMAG + Vs(ix,iz).w.IMAG)*Vderl(ix,iz).uz.IMAG))
    FOR ALL ix,iz
    ! Fourier transform
    DO HFT(PHIttrspd(*,iz,i)) FOR ALL i,iz; DO HFT(temp_tcross(*,iz,i)) FOR ALL i,iz
    DO FFT(PHIttrspd(ix,*,i)) FOR ALL i AND ix=0 TO nx;  DO FFT(temp_tcross(ix,*,i)) FOR ALL i AND ix=0 TO nx
    ! Write to suiuj (summing in ix)
    DO WITH suiuj(iy,iz)
        c=IF ix=0 THEN 1 ELSE 2
        DO PHIttrsp(i) = ~ -c * PHIttrspd(ix,izd,i).REAL FOR i=1 TO 4
        DO tcross(i) = ~ -c * PHIttrspd(ix,izd,i).REAL FOR i=1 TO 4
    FOR ix=0 TO nx AND iz=-nz TO nz
  REPEAT
REPEAT fields


! var,PHIttrsp,psdiss,pstrain
DO WITH luiuj(iy,iz): var(i)=~/nftot; PHIptrsp(i)=~/nftot; PHIttrsp(i)=~/nftot; psdiss(i)=~/nftot; pstrain(i)=~/nftot; prod(i)=~/nftot; tcross(i)=~/nftot FOR ALL i,iy,iz
DO WITH suiuj(iy,iz): var(i)=~/nftot; PHIptrsp(i)=~/nftot; PHIttrsp(i)=~/nftot; psdiss(i)=~/nftot; pstrain(i)=~/nftot; prod(i)=~/nftot; tcross(i)=~/nftot FOR ALL i,iy,iz
!convs(*)=-~/nftot;
! PHIvdiff, vdiff
DO WITH luiuj:  deriv(var(*,iz,i),PHIvdiff(*,iz,i)); LeftLUDivStep2(PHIvdiff(*,iz,i),D0mat); PHIvdiff(*,iz,i)=~*ni; FOR ALL i,iz;
DO WITH luiuj: deriv2(var(*,iz,i),vdiff(*,iz,i));    LeftLUDivStep2(vdiff(*,iz,i),D0mat);    vdiff(*,iz,i)=~*ni*0.5;    FOR ALL i,iz;
DO WITH suiuj:  deriv(var(*,iz,i),PHIvdiff(*,iz,i)); LeftLUDivStep2(PHIvdiff(*,iz,i),D0mat); PHIvdiff(*,iz,i)=~*ni; FOR ALL i,iz;
DO WITH suiuj: deriv2(var(*,iz,i),vdiff(*,iz,i));    LeftLUDivStep2(vdiff(*,iz,i),D0mat);    vdiff(*,iz,i)=~*ni*0.5;    FOR ALL i,iz;
! ptrsp, ttrsp
DO WITH luiuj: deriv(PHIptrsp(*,iz,i),ptrsp(*,iz,i)); LeftLUDivStep2(ptrsp(*,iz,i),D0mat); FOR ALL i,iz;
DO WITH luiuj: deriv(PHIttrsp(*,iz,i),ttrsp(*,iz,i)); LeftLUDivStep2(ttrsp(*,iz,i),D0mat); FOR ALL i,iz;
DO WITH suiuj: deriv(PHIptrsp(*,iz,i),ptrsp(*,iz,i)); LeftLUDivStep2(ptrsp(*,iz,i),D0mat); FOR ALL i,iz;
DO WITH suiuj: deriv(PHIttrsp(*,iz,i),ttrsp(*,iz,i)); LeftLUDivStep2(ttrsp(*,iz,i),D0mat); FOR ALL i,iz;
! profiles
DO luiujprofiles(iy,i)=[SUM luiuj(iy,iz,i) FOR ALL iz] FOR ALL i AND iy=miny TO maxy
DO suiujprofiles(iy,i)=[SUM suiuj(iy,iz,i) FOR ALL iz] FOR ALL i AND iy=miny TO maxy



! Write to binary file
! ------------------------------------
POINTER TO STORED STRUCTURE[
        ARRAY(-1..ny+1) OF MEANTERMS meandata
        ARRAY(-1..ny+1,-nz..nz) OF BALANCE luiujdata
        ARRAY(-1..ny+1,-nz..nz) OF BALANCE suiujdata
        ARRAY(-1..ny+1) OF BALANCE luiujprofilesdata
        ARRAY(-1..ny+1) OF BALANCE suiujprofilesdata
] uiujimage
IF NOT first THEN READ FROM prev
  uiujimage = OPEN("uiuj_largesmall.bin")
  WITH uiujimage:
    meandata(miny..maxy)=mean(miny..maxy)
    luiujdata(miny..maxy)=luiuj(miny..maxy)
    suiujdata(miny..maxy)=suiuj(miny..maxy)
    luiujprofilesdata(miny..maxy)=luiujprofiles(miny..maxy)
    suiujprofilesdata(miny..maxy)=suiujprofiles(miny..maxy)
  CLOSE(uiujimage)
IF NOT last THEN WRITE TO next

! Be polite and say goodbye
! ------------------------------------
WRITE " "
WRITE "Goodbye, man!"



! TODO: definisci una subroutine is_large(ix,iz)